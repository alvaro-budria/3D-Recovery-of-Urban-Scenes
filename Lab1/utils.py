import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from typing import List


def get_line_endpoints(idx, img_id = "0000"):
    lines_path = f"../Data/{img_id}_s_info_lines.txt"
    A = np.loadtxt(lines_path)

    # points of interest
    p1 = [A[idx, 0], A[idx, 1], 1] # initial point in line i
    p2 = [A[idx, 2], A[idx, 3], 1] # final point in line i

    return (p1, p2)


def line_draw(line, canv, size, color=(255,255,255)):
    def get_y(t):
        return -(line[0] * t + line[2]) / line[1]

    def get_x(t):
        return -(line[1] * t + line[2]) / line[0]

    w, h = size

    if line[0] != 0 and abs(get_x(0) - get_x(w)) < w:
        beg = (get_x(0), 0)
        end = (get_x(h), h)
    else:
        beg = (0, get_y(0))
        end = (w, get_y(w))
    canv.line([beg, end], width=4, fill=color)


def plot_img(img, do_not_use=[0]):
    plt.figure(do_not_use[0])
    do_not_use[0] += 1
    plt.imshow(img)


def show_images(images: List[np.ndarray], titles: List[str], size: tuple = (8, 5)):
    if len(images) == 1:
        plt.imshow(images[0])
        plt.title(titles[0], fontsize=10)
        plt.axis('off')
    else:
        _, axes = plt.subplots(1, len(images), figsize=size)
        for ax, image, title in zip(axes.flatten(), images, titles):
            ax.imshow(image)
            ax.set_title(title, fontsize=10)
            ax.axis('off')
        plt.tight_layout()
        plt.show()


def crop(I):
    # Crop the input image to remove empty blocks that may have been generated by a transformation.
    ys, xs = np.where((I[:,:,0] != 0) & (I[:,:,1] != 0) & (I[:,:,2] != 0))
    x0, y0, x, y = np.min(xs), np.min(ys), np.max(xs), np.max(ys)
    return I[y0:y, x0:x]